---
layout: "post"
title: "ngRoute与页面迁移"
date: "2017-03-08 11:39"
---

单页面应用，通常会存在多个视图。在纯javascript框架下模拟页面迁移是非常困难的，实现迁移功能必须包括以下操作：
- 创建一个状态机
- 在浏览器中增加或者删除浏览记录
- 在状态变更时加载/卸载模板以及相应的js
- 根据不同的浏览器提供不同的特性

常见做法：将迁移功能封装到可重用的插件中。

### 在单页面应用中进行页面迁移

浏览器对于带有`#`的url处理方式有所不同。URL中`#`之后的部分都会被浏览器忽略掉而不加入到服务器请求中。

AngularJs通过hash URL(`#`之后的url)进行页面迁移。

### 使用ngRoute

使用步骤：
1. 在HTML中加载模块。
```html
<script src="/path/to/angular-route.js" charset="utf-8"></script>
```
2. 将模块作为主AngularJsapp模块的依赖引入
```html
angular.module('myApp', ['ngRoute'])
```
3. 标注哪一块需要在页面迁移过程中变化。
4. 在config中通过`$routeProvider`定义迁移规则。

```html
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>ngRoute</title>
    <script src="../angular.js" charset="utf-8"></script>
    <script src="../angular-route.js" charset="utf-8"></script>
  </head>
  <body ng-app="routingApp">
    <h2>AngularJS Routing Application</h2>
    <ul>
      <li><a href="#!/">Default Route</a></li>
      <li><a href="#!/second">Second Route</a></li>
      <li><a href="#!/asdasdasd">Nonexistent Route</a></li>
    </ul>
    <div ng-view></div>
    <script>
      angular.module('routingApp', ['ngRoute'])
        .config(['$routeProvider', function($routeProvider) {
          $routeProvider.when('/', {
            template: '<h5>This is the default route</h5>'
          })
          .when('/second', {
            template: '<h5>This is the second route</h5>'
          })
          .otherwise({redirectTo: '/'})
        }]);
    </script>
  </body>
</html>
```

`$routeProvider`让我们可以通过`when()`函数将所有的迁移规则定义在同一个地方，它接收两个参数：

- URL或者URL的正则，对应迁移规则
- 表示配置的对象，发生迁移时需要进行什么工作

### 迁移配置选项

`$routeProvider.when()`的语法如下：

```html
$routeProvider.when(url,{
  template: string,
  templateUrl: string,
  controller: string, function or array,
  controllerAs: string,
  resolve: object<key, function>
})
```

*url*

> 定义了触发迁移选项的URL

*template*

> 将这个HTML模板插入`ng-view`指令中

*templateUrl*

*controller*

> 为特定的迁移指定控制器。可以有两种方式。第一，如果已经通过`angularApp.controller('MyCtrl')`声明，则可以通过名称指定；另一种做法是定义内联控制器，例子如下：

```html
$routeProvider.when('/', {
  template: '<h1>Test Route</h1>',
  controller: ['$window', function($window){
    $window.alert('Test route has been loaded!')
  }]
})`
```

*controllerAs*

> 如下两种语法是一样的

```html
$routeProvider.when('/', {
  controller: 'MyCtrl as ctrl'
});
$routeProvider.when('/', {
  controller: 'MyCtrl as ctrl',
  controllerAs: 'ctrl'
});
```

*redirectTo*

*resolve*

> 从概念层次看，`resolve`是一种在迁移之前执行和完成一些列异步任务的方式。
